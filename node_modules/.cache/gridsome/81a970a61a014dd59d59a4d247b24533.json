{"remainingRequest":"/Users/SinaKhodadad/Dropbox/5. Sargon/scratch_sargon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/SinaKhodadad/Dropbox/5. Sargon/scratch_sargon/src/components/HierarchyTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/SinaKhodadad/Dropbox/5. Sargon/scratch_sargon/src/components/HierarchyTree.vue","mtime":1628189219750},{"path":"/Users/SinaKhodadad/Dropbox/5. Sargon/scratch_sargon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/SinaKhodadad/Dropbox/5. Sargon/scratch_sargon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/SinaKhodadad/Dropbox/5. Sargon/scratch_sargon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/SinaKhodadad/Dropbox/5. Sargon/scratch_sargon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport HierarchyTree from '../components/HierarchyTree'\n\nexport default {\n    name: 'HierarchyTree',\n    props:{\n        tree: Object,\n        hierarchy: Array,\n        bgDark: true\n    },\n    components:{\n        HierarchyTree\n    },\n    data() {\n        return {\n            expanded: false,\n            current: false\n        }\n    },\n    watch:{\n        hierarchy: function () {\n            this.expanded = this.hierarchy.includes(this.tree.name);\n            this.current = ([...this.hierarchy].pop()==this.tree.name)\n        }\n    },\n    methods:{\n        getName(str){\n            return str ? str.split('/').pop().split('#').pop().split('_').join(' ') : ''\n        }\n    },\n    created() {\n        this.expanded = this.hierarchy.includes(this.tree.name);\n        this.current = ([...this.hierarchy].pop()==this.tree.name)\n        // console.log(([...this.hierarchy].pop(),this.tree.name))\n    }\n}\n",{"version":3,"sources":["HierarchyTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HierarchyTree.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"border-l w-full\" v-bind:class=\"current?'bg-gray-200':'bg-white'\">\n        <div v-if=\"tree.name\" class=\"flex text-black font-thin\">\n            <span @click.prevent=\"expanded=!expanded\" v-if=\"tree.children && tree.children.length\"\n                   class=\"text-normal px-2 cursor-pointer\">{{expanded ? '▾' : '▸'}}</span>\n            <span v-else class=\"type\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n\n            <div class=\"font-thin text-gray-700 hover:text-primary-700 text-left w-full\">{{getName(tree.name)}}</div>\n        </div>\n\n        <g-link v-if=\"expanded\" v-for=\"branch in tree.children\" :key=\"branch.name\" class=\"flex ml-6 border-t\" :to=\"branch.name\">\n            <hierarchy-tree :tree=\"branch\" :hierarchy=\"hierarchy\"></hierarchy-tree>\n        </g-link>\n    </div>\n</template>\n\n<static-query>\n    {\n    metadata{\n    pathPrefix\n    }\n    }\n</static-query>\n\n<script>\n    import HierarchyTree from '../components/HierarchyTree'\n\n    export default {\n        name: 'HierarchyTree',\n        props:{\n            tree: Object,\n            hierarchy: Array,\n            bgDark: true\n        },\n        components:{\n            HierarchyTree\n        },\n        data() {\n            return {\n                expanded: false,\n                current: false\n            }\n        },\n        watch:{\n            hierarchy: function () {\n                this.expanded = this.hierarchy.includes(this.tree.name);\n                this.current = ([...this.hierarchy].pop()==this.tree.name)\n            }\n        },\n        methods:{\n            getName(str){\n                return str ? str.split('/').pop().split('#').pop().split('_').join(' ') : ''\n            }\n        },\n        created() {\n            this.expanded = this.hierarchy.includes(this.tree.name);\n            this.current = ([...this.hierarchy].pop()==this.tree.name)\n            // console.log(([...this.hierarchy].pop(),this.tree.name))\n        }\n    }\n</script>\n\n\n"]}]}